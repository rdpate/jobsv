#!/bin/sh -Cue
#.help
# % CMD..
#
# For each input line, run "CMD.. LINE" under a jobserver, which is created if required.
#
# Note: a partial final line (eg. at unexpected EOF) is not detected.
#
# Options:
# -a  --all                   keep verbatim input lines (-b -c -s)
# -b  --blanks                keep blank lines
# -c  --comments              keep lines matching /^ *#/
# -s  --spaces                keep leading/trailing spaces
#
# Environment exported to CMD:
#     JOBNO                   job number, increment for each CMD
#     LINENO                  input line number, including skipped
#     ORIG_LINE               original line

if jobsv_sh="$(which jobsv.sh 2>/dev/null)"; then
    . "$jobsv_sh"
    jobsv_or_exec "$0" "$@"
else
    jobsv_bg() { "$@" </dev/null; }
    fi

fatal() { rc="$1"; shift; printf %s\\n "${0##*/} error: $*" >&2 || true; exit "$rc"; }

keep_blanks=false
keep_comments=false
keep_spaces=false
handle_option() {
    case "$1" in
        a|all)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            keep_blanks=true
            keep_comments=true
            keep_spaces=true
            ;;
        b|blanks)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            keep_blanks=true
            ;;
        c|comments)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            keep_comments=true
            ;;
        s|spaces)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            keep_spaces=true
            ;;
        *) fatal 64 "unknown option $1" ;;
        esac
    }
while [ $# -gt 0 ]; do
    case "$1" in
        --) shift; break ;;
        --*=*) x="${1#--}"; handle_option "${x%%=*}" "${x#*=}"; shift ;;
        --*) handle_option "${1#--}"; shift ;;
        -?) handle_option "${1#-}"; shift ;;
        -?*)
            v="${1#??}"
            x="${1%"$v"}"
            handle_option "${x#-}" "$v"
            shift
            ;;
        *) break ;;
        esac
    done

[ $# != 0 ] || fatal 64 'missing CMD argument'
cmd="$(which -- "$1" 2>&1)" || fatal 65 "command not found: $1"
shift

if $keep_comments; then
    skip_if_comment() { false; }
else
    if $keep_spaces; then
        skip_if_comment() {
            set -- "$(printf %s "$1" | sed 's/^  *//')"
            case "$1" in '#'*) ;; *) return 1 ;; esac
            }
    else
        skip_if_comment() {
            case "$1" in '#'*) ;; *) return 1 ;; esac
            }
        fi
    fi
if $keep_blanks; then
    skip_if_blank() { false; }
else
    if $keep_spaces; then
        skip_if_blank() {
            [ -z "$(printf %s "$1" | sed 's/^  *$//')" ]
            }
    else
        skip_if_blank() {
            [ -z "$1" ]
            }
        fi
    fi

JOBNO=1
export JOBNO
LINENO=0
export LINENO
export ORIG_LINE
while IFS= read -r ORIG_LINE; do
    LINENO=$((LINENO + 1))
    line="$ORIG_LINE"
    $keep_spaces || line="$(printf %s "$line" | sed -r 's/^ +| +$//g')"
    if skip_if_blank "$line"; then continue; fi
    if skip_if_comment "$line"; then continue; fi

    jobsv_bg "$cmd" "$@" "$line"
    JOBNO=$((JOBNO + 1))
    done
